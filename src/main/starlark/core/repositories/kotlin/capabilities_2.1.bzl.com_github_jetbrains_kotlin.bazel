# Copyright 2025 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# DO NOT EDIT: generated by bazel run //src/main/kotlin/io/bazel/kotlin/generate:kotlin_release_options
KOTLIN_OPTS = {
    "-Werror": struct(
        flag = "-Werror",
        doc = "Report an error if there are any warnings.",
        default = False,
    ),
    "-Wextra": struct(
        flag = "-Wextra",
        doc = "Enable extra checkers for K2.",
        default = False,
    ),
    "-XXexplicit-return-types": struct(
        flag = "-XXexplicit-return-types",
        doc = """Force the compiler to report errors on all public API declarations without an explicit return type.
Use the 'warning' level to issue warnings instead of errors.
This flag partially enables functionality of `-Xexplicit-api` flag, so please don't use them altogether""",
        default = "disable",
    ),
    "-Xabi-stability": struct(
        flag = "-Xabi-stability",
        doc = """When using unstable compiler features such as FIR, use 'stable' to mark generated class files as stable
to prevent diagnostics from being reported when using stable compilers at the call site.
When using the JVM IR backend, conversely, use 'unstable' to mark generated class files as unstable
to force diagnostics to be reported.""",
        default = None,
    ),
    "-Xadd-modules": struct(
        flag = "-Xadd-modules",
        doc = "Root modules to resolve in addition to the initial modules, or all modules on the module path if <module> is ALL-MODULE-PATH.",
        default = [],
    ),
    "-Xallow-any-scripts-in-source-roots": struct(
        flag = "-Xallow-any-scripts-in-source-roots",
        doc = "Allow compiling scripts along with regular Kotlin sources.",
        default = False,
    ),
    "-Xallow-kotlin-package": struct(
        flag = "-Xallow-kotlin-package",
        doc = "Allow compiling code in the 'kotlin' package, and allow not requiring 'kotlin.stdlib' in 'module-info'.",
        default = False,
    ),
    "-Xallow-no-source-files": struct(
        flag = "-Xallow-no-source-files",
        doc = "Allow the set of source files to be empty.",
        default = False,
    ),
    "-Xallow-unstable-dependencies": struct(
        flag = "-Xallow-unstable-dependencies",
        doc = "Do not report errors on classes in dependencies that were compiled by an unstable version of the Kotlin compiler.",
        default = False,
    ),
    "-Xassertions": struct(
        flag = "-Xassertions",
        doc = """'kotlin.assert' call behavior:
-Xassertions=always-enable:  enable, ignore JVM assertion settings;
-Xassertions=always-disable: disable, ignore JVM assertion settings;
-Xassertions=jvm:            enable, depend on JVM assertion settings;
-Xassertions=legacy:         calculate the condition on each call, the behavior depends on JVM assertion settings in the kotlin package;
default: legacy""",
        default = "legacy",
    ),
    "-Xbackend-threads": struct(
        flag = "-Xbackend-threads",
        doc = """Run codegen phase in N parallel threads.
0 means use one thread per processor core.
The default value is 1.""",
        default = "1",
    ),
    "-Xcheck-phase-conditions": struct(
        flag = "-Xcheck-phase-conditions",
        doc = "Check pre- and postconditions of IR lowering phases.",
        default = False,
    ),
    "-Xcheck-sticky-phase-conditions": struct(
        flag = "-Xcheck-sticky-phase-conditions",
        doc = "Run sticky condition checks on subsequent phases. Implicitly enables '-Xcheck-phase-conditions'.",
        default = False,
    ),
    "-Xcommon-sources": struct(
        flag = "-Xcommon-sources",
        doc = """Sources of the common module that need to be compiled together with this module in multiplatform mode.
They should be a subset of sources passed as free arguments.""",
        default = [],
    ),
    "-Xcompile-java": struct(
        flag = "-Xcompile-java",
        doc = "Reuse 'javac' analysis and compile Java source files.",
        default = False,
    ),
    "-Xconsistent-data-class-copy-visibility": struct(
        flag = "-Xconsistent-data-class-copy-visibility",
        doc = "The effect of this compiler flag is the same as applying @ConsistentCopyVisibility annotation to all data classes in the module. See https://youtrack.jetbrains.com/issue/KT-11914",
        default = False,
    ),
    "-Xcontext-receivers": struct(
        flag = "-Xcontext-receivers",
        doc = "Enable experimental context receivers.",
        default = False,
    ),
    "-Xdebug": struct(
        flag = "-Xdebug",
        doc = """Enable debug mode for compilation.
Currently this includes spilling all variables in a suspending context regardless of whether they are alive.""",
        default = False,
    ),
    "-Xdefault-script-extension": struct(
        flag = "-Xdefault-script-extension",
        doc = "Compile expressions and unrecognized scripts passed with the -script argument as scripts with the given filename extension.",
        default = None,
    ),
    "-Xdirect-java-actualization": struct(
        flag = "-Xdirect-java-actualization",
        doc = "Enable experimental direct Java actualization support.",
        default = False,
    ),
    "-Xdisable-default-scripting-plugin": struct(
        flag = "-Xdisable-default-scripting-plugin",
        doc = "Don't enable the scripting plugin by default.",
        default = False,
    ),
    "-Xdisable-phases": struct(
        flag = "-Xdisable-phases",
        doc = "Disable backend phases.",
        default = [],
    ),
    "-Xdisable-standard-script": struct(
        flag = "-Xdisable-standard-script",
        doc = "Disable standard Kotlin scripting support.",
        default = False,
    ),
    "-Xdont-warn-on-error-suppression": struct(
        flag = "-Xdont-warn-on-error-suppression",
        doc = "Don't report warnings when errors are suppressed. This only affects K2.",
        default = False,
    ),
    "-Xemit-jvm-type-annotations": struct(
        flag = "-Xemit-jvm-type-annotations",
        doc = "Emit JVM type annotations in bytecode.",
        default = False,
    ),
    "-Xenable-builder-inference": struct(
        flag = "-Xenable-builder-inference",
        doc = """Use builder inference by default for all calls with lambdas that can't be resolved without it.
The corresponding calls' declarations may not be marked with @BuilderInference.""",
        default = False,
    ),
    "-Xenable-incremental-compilation": struct(
        flag = "-Xenable-incremental-compilation",
        doc = "Enable incremental compilation.",
        default = False,
    ),
    "-Xenhance-type-parameter-types-to-def-not-null": struct(
        flag = "-Xenhance-type-parameter-types-to-def-not-null",
        doc = "Enhance not-null-annotated type parameter types to definitely-non-nullable types ('@NotNull T' => 'T & Any').",
        default = False,
    ),
    "-Xexpect-actual-classes": struct(
        flag = "-Xexpect-actual-classes",
        doc = """'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta.
Kotlin reports a warning every time you use one of them. You can use this flag to mute the warning.""",
        default = False,
    ),
    "-Xexplicit-api": struct(
        flag = "-Xexplicit-api",
        doc = """Force the compiler to report errors on all public API declarations without an explicit visibility or a return type.
Use the 'warning' level to issue warnings instead of errors.""",
        default = "disable",
    ),
    "-Xextended-compiler-checks": struct(
        flag = "-Xextended-compiler-checks",
        doc = """Enable additional compiler checks that might provide verbose diagnostic information for certain errors.
Warning: This mode is not backward compatible and might cause compilation errors in previously compiled code.""",
        default = False,
    ),
    "-Xfragment-refines": struct(
        flag = "-Xfragment-refines",
        doc = "Declare that <fromModuleName> refines <onModuleName> with the dependsOn/refines relation.",
        default = [],
    ),
    "-Xfragment-sources": struct(
        flag = "-Xfragment-sources",
        doc = "Add sources to a specific fragment of a multiplatform compilation.",
        default = [],
    ),
    "-Xfragments": struct(
        flag = "-Xfragments",
        doc = "Declare all known fragments of a multiplatform compilation.",
        default = [],
    ),
    "-Xfriend-paths": struct(
        flag = "-Xfriend-paths",
        doc = "Paths to output directories for friend modules (modules whose internals should be visible).",
        default = [],
    ),
    "-Xgenerate-strict-metadata-version": struct(
        flag = "-Xgenerate-strict-metadata-version",
        doc = "Generate metadata with strict version semantics (see the KDoc entry on 'Metadata.extraInt').",
        default = False,
    ),
    "-Xignore-const-optimization-errors": struct(
        flag = "-Xignore-const-optimization-errors",
        doc = "Ignore all compilation exceptions while optimizing some constant expressions.",
        default = False,
    ),
    "-Xinference-compatibility": struct(
        flag = "-Xinference-compatibility",
        doc = "Enable compatibility changes for the generic type inference algorithm.",
        default = False,
    ),
    "-Xinline-classes": struct(
        flag = "-Xinline-classes",
        doc = "Enable experimental inline classes.",
        default = False,
    ),
    "-Xir-do-not-clear-binding-context": struct(
        flag = "-Xir-do-not-clear-binding-context",
        doc = "When using the IR backend, do not clear BindingContext between 'psi2ir' and lowerings.",
        default = False,
    ),
    "-Xir-inliner": struct(
        flag = "-Xir-inliner",
        doc = "Inline functions using the IR inliner instead of the bytecode inliner.",
        default = False,
    ),
    "-Xjava-package-prefix": struct(
        flag = "-Xjava-package-prefix",
        doc = "Package prefix for Java files.",
        default = None,
    ),
    "-Xjava-source-roots": struct(
        flag = "-Xjava-source-roots",
        doc = "Paths to directories with Java source files.",
        default = [],
    ),
    "-Xjavac-arguments": struct(
        flag = "-Xjavac-arguments",
        doc = "Java compiler arguments.",
        default = [],
    ),
    "-Xjdk-release": struct(
        flag = "-Xjdk-release",
        doc = """Compile against the specified JDK API version, similarly to javac's '-release'. This requires JDK 9 or newer.
The supported versions depend on the JDK used; for JDK 17+, the supported versions are 1.8 and 9–23.
This also sets the value of '-jvm-target' to be equal to the selected JDK version.""",
        default = None,
    ),
    "-Xjspecify-annotations": struct(
        flag = "-Xjspecify-annotations",
        doc = """Specify the behavior of 'jspecify' annotations.
The default value is 'warn'.""",
        default = None,
    ),
    "-Xjsr305": struct(
        flag = "-Xjsr305",
        doc = """Specify the behavior of 'JSR-305' nullability annotations:
-Xjsr305={ignore/strict/warn}                   global (all non-@UnderMigration annotations)
-Xjsr305=under-migration:{ignore/strict/warn}   all @UnderMigration annotations
-Xjsr305=@<fq.name>:{ignore/strict/warn}        annotation with the given fully qualified class name
Modes:
* ignore
* strict (experimental; treat like other supported nullability annotations)
* warn (report a warning)""",
        default = [],
    ),
    "-Xjvm-default": struct(
        flag = "-Xjvm-default",
        doc = """Emit JVM default methods for interface declarations with bodies. The default is 'disable'.
-Xjvm-default=all                Generate JVM default methods for all interface declarations with bodies in the module.
                                 Do not generate 'DefaultImpls' stubs for interface declarations with bodies. If an interface inherits a method with a
                                 body from an interface compiled in 'disable' mode and doesn't override it, then a 'DefaultImpls' stub will be
                                 generated for it.
                                 This BREAKS BINARY COMPATIBILITY if some client code relies on the presence of 'DefaultImpls' classes.
                                 Note that if interface delegation is used, all interface methods are delegated.
-Xjvm-default=all-compatibility  Like 'all', but additionally generate compatibility stubs in the 'DefaultImpls' classes.
                                 Compatibility stubs can help library and runtime authors maintain backward binary compatibility
                                 for existing clients compiled against previous library versions.
                                 'all' and 'all-compatibility' modes change the library ABI surface that will be used by clients after
                                 the recompilation of the library. Because of this, clients might be incompatible with previous library
                                 versions. This usually means that proper library versioning is required, for example with major version increases in SemVer.
                                 In subtypes of Kotlin interfaces compiled in 'all' or 'all-compatibility' mode, 'DefaultImpls'
                                 compatibility stubs will invoke the default method of the interface with standard JVM runtime resolution semantics.
                                 Perform additional compatibility checks for classes inheriting generic interfaces where in some cases an
                                 additional implicit method with specialized signatures was generated in 'disable' mode.
                                 Unlike in 'disable' mode, the compiler will report an error if such a method is not overridden explicitly
                                 and the class is not annotated with '@JvmDefaultWithoutCompatibility' (see KT-39603 for more details).
-Xjvm-default=disable            Default behavior. Do not generate JVM default methods.""",
        default = "disable",
    ),
    "-Xjvm-enable-preview": struct(
        flag = "-Xjvm-enable-preview",
        doc = """Allow using Java features that are in the preview phase.
This works like '--enable-preview' in Java. All class files are marked as compiled with preview features, meaning it won't be possible to use them in release environments.""",
        default = False,
    ),
    "-Xklib": struct(
        flag = "-Xklib",
        doc = "Paths to cross-platform libraries in the .klib format.",
        default = None,
    ),
    "-Xlambdas": struct(
        flag = "-Xlambdas",
        doc = """Select the code generation scheme for lambdas.
-Xlambdas=indy                  Generate lambdas using 'invokedynamic' with 'LambdaMetafactory.metafactory'.
                                A lambda object created using 'LambdaMetafactory.metafactory' will have a different 'toString()'.
-Xlambdas=class                 Generate lambdas as explicit classes.
The default value is 'indy' if language version is 2.0+, and 'class' otherwise.""",
        default = None,
    ),
    "-Xlegacy-smart-cast-after-try": struct(
        flag = "-Xlegacy-smart-cast-after-try",
        doc = "Allow 'var' smart casts even in the presence of assignments in 'try' blocks.",
        default = False,
    ),
    "-Xlink-via-signatures": struct(
        flag = "-Xlink-via-signatures",
        doc = """Link JVM IR symbols via signatures instead of descriptors.
This mode is slower, but it can be useful for troubleshooting problems with the JVM IR backend.
This option is deprecated and will be deleted in future versions.
It has no effect when -language-version is 2.0 or higher.""",
        default = False,
    ),
    "-Xlist-phases": struct(
        flag = "-Xlist-phases",
        doc = "List backend phases.",
        default = False,
    ),
    "-Xmetadata-klib": struct(
        flag = "-Xmetadata-klib",
        doc = "Produce a klib that only contains the metadata of declarations.",
        default = False,
    ),
    "-Xmetadata-version": struct(
        flag = "-Xmetadata-version",
        doc = "Change the metadata version of the generated binary files.",
        default = None,
    ),
    "-Xmodule-path": struct(
        flag = "-Xmodule-path",
        doc = "Paths to Java 9+ modules.",
        default = None,
    ),
    "-Xmulti-dollar-interpolation": struct(
        flag = "-Xmulti-dollar-interpolation",
        doc = "Enable experimental multi-dollar interpolation.",
        default = False,
    ),
    "-Xmulti-platform": struct(
        flag = "-Xmulti-platform",
        doc = "Enable language support for multiplatform projects.",
        default = False,
    ),
    "-Xmultifile-parts-inherit": struct(
        flag = "-Xmultifile-parts-inherit",
        doc = "Compile multifile classes as a hierarchy of parts and a facade.",
        default = False,
    ),
    "-Xnew-inference": struct(
        flag = "-Xnew-inference",
        doc = "Enable the new experimental generic type inference algorithm.",
        default = False,
    ),
    "-Xno-call-assertions": struct(
        flag = "-Xno-call-assertions",
        doc = "Don't generate not-null assertions for arguments of platform types.",
        default = False,
    ),
    "-Xno-check-actual": struct(
        flag = "-Xno-check-actual",
        doc = "Do not check for the presence of the 'actual' modifier in multiplatform projects.",
        default = False,
    ),
    "-Xno-inline": struct(
        flag = "-Xno-inline",
        doc = "Disable method inlining.",
        default = False,
    ),
    "-Xno-new-java-annotation-targets": struct(
        flag = "-Xno-new-java-annotation-targets",
        doc = "Don't generate Java 1.8+ targets for Kotlin annotation classes.",
        default = False,
    ),
    "-Xno-optimize": struct(
        flag = "-Xno-optimize",
        doc = "Disable optimizations.",
        default = False,
    ),
    "-Xno-param-assertions": struct(
        flag = "-Xno-param-assertions",
        doc = "Don't generate not-null assertions on parameters of methods accessible from Java.",
        default = False,
    ),
    "-Xno-receiver-assertions": struct(
        flag = "-Xno-receiver-assertions",
        doc = "Don't generate not-null assertions for extension receiver arguments of platform types.",
        default = False,
    ),
    "-Xno-reset-jar-timestamps": struct(
        flag = "-Xno-reset-jar-timestamps",
        doc = "Don't reset jar entry timestamps to a fixed date.",
        default = False,
    ),
    "-Xno-source-debug-extension": struct(
        flag = "-Xno-source-debug-extension",
        doc = "Don't generate the '@kotlin.jvm.internal.SourceDebugExtension' annotation with an SMAP copy on classes.",
        default = False,
    ),
    "-Xno-unified-null-checks": struct(
        flag = "-Xno-unified-null-checks",
        doc = "Use pre-1.4 exception types instead of 'java.lang.NPE' in null checks. See KT-22275 for more details.",
        default = False,
    ),
    "-Xnon-local-break-continue": struct(
        flag = "-Xnon-local-break-continue",
        doc = "Enable experimental non-local break and continue.",
        default = False,
    ),
    "-Xnullability-annotations": struct(
        flag = "-Xnullability-annotations",
        doc = """Specify the behavior for specific Java nullability annotations (provided with fully qualified package name).
Modes:
* ignore
* strict
* warn (report a warning)""",
        default = [],
    ),
    "-Xphases-to-dump": struct(
        flag = "-Xphases-to-dump",
        doc = "Dump the backend's state both before and after these phases.",
        default = [],
    ),
    "-Xphases-to-dump-after": struct(
        flag = "-Xphases-to-dump-after",
        doc = "Dump the backend's state after these phases.",
        default = [],
    ),
    "-Xphases-to-dump-before": struct(
        flag = "-Xphases-to-dump-before",
        doc = "Dump the backend's state before these phases.",
        default = [],
    ),
    "-Xphases-to-validate": struct(
        flag = "-Xphases-to-validate",
        doc = "Validate the backend's state both before and after these phases.",
        default = [],
    ),
    "-Xphases-to-validate-after": struct(
        flag = "-Xphases-to-validate-after",
        doc = "Validate the backend's state after these phases.",
        default = [],
    ),
    "-Xphases-to-validate-before": struct(
        flag = "-Xphases-to-validate-before",
        doc = "Validate the backend's state before these phases.",
        default = [],
    ),
    "-Xprofile": struct(
        flag = "-Xprofile",
        doc = """Debug option: Run the compiler with the async profiler and save snapshots to `outputDir`; `command` is passed to the async profiler on start.
`profilerPath` is the path to libasyncProfiler.so; async-profiler.jar should be on the compiler classpath.
If it's not on the classpath, the compiler will attempt to load async-profiler.jar from the containing directory of profilerPath.
Example: -Xprofile=<PATH_TO_ASYNC_PROFILER>/async-profiler/build/libasyncProfiler.so:event=cpu,interval=1ms,threads,start:<SNAPSHOT_DIR_PATH>""",
        default = None,
    ),
    "-Xprofile-phases": struct(
        flag = "-Xprofile-phases",
        doc = "Profile backend phases.",
        default = False,
    ),
    "-Xrender-internal-diagnostic-names": struct(
        flag = "-Xrender-internal-diagnostic-names",
        doc = "Render the internal names of warnings and errors.",
        default = False,
    ),
    "-Xreport-all-warnings": struct(
        flag = "-Xreport-all-warnings",
        doc = "Report all warnings even if errors are found.",
        default = False,
    ),
    "-Xreport-output-files": struct(
        flag = "-Xreport-output-files",
        doc = "Report the source-to-output file mapping.",
        default = False,
    ),
    "-Xreport-perf": struct(
        flag = "-Xreport-perf",
        doc = "Report detailed performance statistics.",
        default = False,
    ),
    "-Xsam-conversions": struct(
        flag = "-Xsam-conversions",
        doc = """Select the code generation scheme for SAM conversions.
-Xsam-conversions=indy          Generate SAM conversions using 'invokedynamic' with 'LambdaMetafactory.metafactory'.
-Xsam-conversions=class         Generate SAM conversions as explicit classes.
The default value is 'indy'.""",
        default = None,
    ),
    "-Xsanitize-parentheses": struct(
        flag = "-Xsanitize-parentheses",
        doc = """Transform '(' and ')' in method names to some other character sequence.
This mode can BREAK BINARY COMPATIBILITY and should only be used as a workaround for
problems with parentheses in identifiers on certain platforms.""",
        default = False,
    ),
    "-Xscript-resolver-environment": struct(
        flag = "-Xscript-resolver-environment",
        doc = "Set the script resolver environment in key-value pairs (the value can be quoted and escaped).",
        default = [],
    ),
    "-Xself-upper-bound-inference": struct(
        flag = "-Xself-upper-bound-inference",
        doc = "Support inferring type arguments from the self-type upper bounds of the corresponding type parameters.",
        default = False,
    ),
    "-Xserialize-ir": struct(
        flag = "-Xserialize-ir",
        doc = "Save the IR to metadata (Experimental).",
        default = "none",
    ),
    "-Xskip-metadata-version-check": struct(
        flag = "-Xskip-metadata-version-check",
        doc = "Allow loading classes with bad metadata versions and pre-release classes.",
        default = False,
    ),
    "-Xskip-prerelease-check": struct(
        flag = "-Xskip-prerelease-check",
        doc = "Allow loading pre-release classes.",
        default = False,
    ),
    "-Xstdlib-compilation": struct(
        flag = "-Xstdlib-compilation",
        doc = "Enables special features which are relevant only for stdlib compilation.",
        default = False,
    ),
    "-Xstring-concat": struct(
        flag = "-Xstring-concat",
        doc = """Select the code generation scheme for string concatenation:
-Xstring-concat=indy-with-constants  Concatenate strings using 'invokedynamic' and 'makeConcatWithConstants'. This requires '-jvm-target 9' or greater.
-Xstring-concat=indy                 Concatenate strings using 'invokedynamic' and 'makeConcat'. This requires '-jvm-target 9' or greater.
-Xstring-concat=inline               Concatenate strings using 'StringBuilder'
default: 'indy-with-constants' for JVM targets 9 or greater, 'inline' otherwise.""",
        default = None,
    ),
    "-Xsupport-compatqual-checker-framework-annotations": struct(
        flag = "-Xsupport-compatqual-checker-framework-annotations",
        doc = """Specify the behavior for Checker Framework 'compatqual' annotations ('NullableDecl'/'NonNullDecl').
The default value is 'enable'.""",
        default = None,
    ),
    "-Xsuppress-api-version-greater-than-language-version-error": struct(
        flag = "-Xsuppress-api-version-greater-than-language-version-error",
        doc = """Suppress error about API version greater than language version.
Warning: This is temporary solution (see KT-63712) intended to be used only for stdlib build.""",
        default = False,
    ),
    "-Xsuppress-deprecated-jvm-target-warning": struct(
        flag = "-Xsuppress-deprecated-jvm-target-warning",
        doc = """Suppress warnings about deprecated JVM target versions.
This option has no effect and will be deleted in a future version.""",
        default = False,
    ),
    "-Xsuppress-missing-builtins-error": struct(
        flag = "-Xsuppress-missing-builtins-error",
        doc = """Suppress the "cannot access built-in declaration" error (useful with '-no-stdlib').""",
        default = False,
    ),
    "-Xsuppress-version-warnings": struct(
        flag = "-Xsuppress-version-warnings",
        doc = "Suppress warnings about outdated, inconsistent, or experimental language or API versions.",
        default = False,
    ),
    "-Xsuppress-warning": struct(
        flag = "-Xsuppress-warning",
        doc = "Suppress specified warning module-wide.",
        default = [],
    ),
    "-Xtype-enhancement-improvements-strict-mode": struct(
        flag = "-Xtype-enhancement-improvements-strict-mode",
        doc = """Enable strict mode for improvements to type enhancement for loaded Java types based on nullability annotations,
including the ability to read type-use annotations from class files.
See KT-45671 for more details.""",
        default = False,
    ),
    "-Xunrestricted-builder-inference": struct(
        flag = "-Xunrestricted-builder-inference",
        doc = "Eliminate builder inference restrictions, for example by allowing type variables to be returned from builder inference calls.",
        default = False,
    ),
    "-Xuse-14-inline-classes-mangling-scheme": struct(
        flag = "-Xuse-14-inline-classes-mangling-scheme",
        doc = "Use the scheme for inline class mangling from version 1.4 instead of the one from 1.4.30.",
        default = False,
    ),
    "-Xuse-fast-jar-file-system": struct(
        flag = "-Xuse-fast-jar-file-system",
        doc = "Use the fast implementation of Jar FS. This may speed up compilation time, but it is experimental.",
        default = False,
    ),
    "-Xuse-fir-experimental-checkers": struct(
        flag = "-Xuse-fir-experimental-checkers",
        doc = "Enable experimental frontend IR checkers that are not yet ready for production.",
        default = False,
    ),
    "-Xuse-fir-ic": struct(
        flag = "-Xuse-fir-ic",
        doc = """Compile using frontend IR internal incremental compilation.
Warning: This feature is not yet production-ready.""",
        default = False,
    ),
    "-Xuse-fir-lt": struct(
        flag = "-Xuse-fir-lt",
        doc = "Compile using the LightTree parser with the frontend IR.",
        default = True,
    ),
    "-Xuse-inline-scopes-numbers": struct(
        flag = "-Xuse-inline-scopes-numbers",
        doc = "Use inline scopes numbers for inline marker variables.",
        default = False,
    ),
    "-Xuse-javac": struct(
        flag = "-Xuse-javac",
        doc = "Use javac for Java source and class file analysis.",
        default = False,
    ),
    "-Xuse-k2": struct(
        flag = "-Xuse-k2",
        doc = "Compile using the experimental K2 compiler pipeline. No compatibility guarantees are provided yet.",
        default = False,
    ),
    "-Xuse-k2-kapt": struct(
        flag = "-Xuse-k2-kapt",
        doc = "Enable the experimental support for K2 KAPT.",
        default = False,
    ),
    "-Xuse-old-backend": struct(
        flag = "-Xuse-old-backend",
        doc = "Use the old JVM backend.",
        default = False,
    ),
    "-Xuse-old-class-files-reading": struct(
        flag = "-Xuse-old-class-files-reading",
        doc = """Use the old implementation for reading class files. This may slow down the compilation and cause problems with Groovy interop.
This can be used in the event of problems with the new implementation.""",
        default = False,
    ),
    "-Xuse-old-innerclasses-logic": struct(
        flag = "-Xuse-old-innerclasses-logic",
        doc = """Use the old logic for the generation of 'InnerClasses' attributes.
This option is deprecated and will be deleted in future versions.""",
        default = False,
    ),
    "-Xuse-type-table": struct(
        flag = "-Xuse-type-table",
        doc = "Use a type table in metadata serialization.",
        default = False,
    ),
    "-Xvalidate-bytecode": struct(
        flag = "-Xvalidate-bytecode",
        doc = "Validate generated JVM bytecode before and after optimizations.",
        default = False,
    ),
    "-Xvalue-classes": struct(
        flag = "-Xvalue-classes",
        doc = "Enable experimental value classes.",
        default = False,
    ),
    "-Xverbose-phases": struct(
        flag = "-Xverbose-phases",
        doc = "Be verbose while performing the given backend phases.",
        default = [],
    ),
    "-Xverify-ir": struct(
        flag = "-Xverify-ir",
        doc = "IR verification mode (no verification by default).",
        default = None,
    ),
    "-Xverify-ir-visibility": struct(
        flag = "-Xverify-ir-visibility",
        doc = "Check for visibility violations in IR when validating it before running any lowerings. Only has effect if '-Xverify-ir' is not 'none'.",
        default = False,
    ),
    "-Xverify-ir-visibility-after-inlining": struct(
        flag = "-Xverify-ir-visibility-after-inlining",
        doc = """Check for visibility violations in IR when validating it after the function inlining phase.
Only has effect if '-Xverify-ir' is not 'none'.
This flag is deprecated and will soon be removed in favor of '-Xverify-ir-visibility'.
""",
        default = False,
    ),
    "-Xwhen-guards": struct(
        flag = "-Xwhen-guards",
        doc = "Enable experimental language support for when guards.",
        default = False,
    ),
    "-api-version": struct(
        flag = "-api-version",
        doc = "Allow using declarations from only the specified version of bundled libraries.",
        default = None,
    ),
    "-java-parameters": struct(
        flag = "-java-parameters",
        doc = "Generate metadata for Java 1.8 reflection on method parameters.",
        default = False,
    ),
    "-jvm-target": struct(
        flag = "-jvm-target",
        doc = "The target version of the generated JVM bytecode (1.8 and 9–23), with 1.8 as the default.",
        default = None,
    ),
    "-language-version": struct(
        flag = "-language-version",
        doc = "Provide source compatibility with the specified version of Kotlin.",
        default = None,
    ),
    "-no-reflect": struct(
        flag = "-no-reflect",
        doc = "Don't automatically include the Kotlin reflection dependency in the classpath.",
        default = False,
    ),
    "-nowarn": struct(
        flag = "-nowarn",
        doc = "Don't generate any warnings.",
        default = False,
    ),
    "-opt-in": struct(
        flag = "-opt-in",
        doc = "Enable API usages that require opt-in with an opt-in requirement marker with the given fully qualified name.",
        default = [],
    ),
    "-progressive": struct(
        flag = "-progressive",
        doc = """Enable progressive compiler mode.
In this mode, deprecations and bug fixes for unstable code take effect immediately
instead of going through a graceful migration cycle.
Code written in progressive mode is backward compatible; however, code written without
progressive mode enabled may cause compilation errors in progressive mode.""",
        default = False,
    ),
    "-verbose": struct(
        flag = "-verbose",
        doc = "Enable verbose logging output.",
        default = False,
    ),
    "-version": struct(
        flag = "-version",
        doc = "Display the compiler version.",
        default = False,
    ),
}
